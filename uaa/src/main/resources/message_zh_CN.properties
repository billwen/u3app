login.page.title=\u767B\u5F55
login.page.logout.msg=\u6CE8\u9500
login.page.bad-credential=\u7528\u6237\u540D\u6216\u5BC6\u7801\u9519\u8BEF
login.page.form.username=\u7528\u6237\u540D
login.page.form.password=\u5BC6\u7801
login.page.form.submit=\u767B\u5F55
index.page.menu.sign-out=\u9000\u51FA
login.page.form.remember-me=\u8BB0\u4F4F\u6211

ValidEmail.email=\u4E0D\u5408\u6CD5\u7684\u7535\u5B50\u90AE\u4EF6\u5730\u5740

HISTORY_VIOLATION=\u5BC6\u7801 matches one of %1$s previous \u5BC6\u7801s.
ILLEGAL_WORD=\u5BC6\u7801 contains the dictionary word '%1$s'.
ILLEGAL_WORD_REVERSED=\u5BC6\u7801 contains the reversed dictionary word '%1$s'.
ILLEGAL_DIGEST_WORD=\u5BC6\u7801 contains a dictionary word.
ILLEGAL_DIGEST_WORD_REVERSED=\u5BC6\u7801 contains a reversed dictionary word.
ILLEGAL_MATCH=\u5BC6\u7801 matches the illegal pattern '%1$s'.
ALLOWED_MATCH=\u5BC6\u7801 must match pattern '%1$s'.
ILLEGAL_CHAR=\u5BC6\u7801 %2$s the illegal character '%1$s'.
ALLOWED_CHAR=\u5BC6\u7801 %2$s the illegal character '%1$s'.
ILLEGAL_QWERTY_SEQUENCE=\u5BC6\u7801 contains the illegal QWERTY sequence '%1$s'.
ILLEGAL_ALPHABETICAL_SEQUENCE=\u5BC6\u7801 contains the illegal alphabetical sequence '%1$s'.
ILLEGAL_NUMERICAL_SEQUENCE=\u5BC6\u7801 contains the illegal numerical sequence '%1$s'.
ILLEGAL_USERNAME=\u5BC6\u7801 %2$s the user id '%1$s'.
ILLEGAL_USERNAME_REVERSED=\u5BC6\u7801 %2$s the user id '%1$s' in reverse.
ILLEGAL_WHITESPACE=\u5BC6\u7801 %2$s a whitespace character.
ILLEGAL_NUMBER_RANGE=\u5BC6\u7801 %2$s the number '%1$s'.
ILLEGAL_REPEATED_CHARS=\u5BC6\u7801 contains %3$s sequences of %1$s or more repeated characters, but only %2$s allowed: %4$s.
INSUFFICIENT_UPPERCASE=\u5BC6\u7801\u5FC5\u987B\u5305\u542B %1$s or more uppercase characters.
INSUFFICIENT_LOWERCASE=\u5BC6\u7801\u5FC5\u987B\u5305\u542B %1$s \u6216\u66F4\u591A\u7684\u5C0F\u5199\u5B57\u6BCD.
INSUFFICIENT_ALPHABETICAL=\u5BC6\u7801\u5FC5\u987B\u5305\u542B %1$s \u6216\u66F4\u591A\u7684\u5B57\u6BCD.
INSUFFICIENT_DIGIT=\u5BC6\u7801\u5FC5\u987B\u5305\u542B %1$s \u6216\u66F4\u591A\u7684\u6570\u5B57\u5B57\u7B26.
INSUFFICIENT_SPECIAL=\u5BC6\u7801\u5FC5\u987B\u5305\u542B %1$s or more special characters.
INSUFFICIENT_CHARACTERISTICS=\u5BC6\u7801 matches %1$s of %3$s character rules, but %2$s are required.
INSUFFICIENT_COMPLEXITY=\u5BC6\u7801 meets %2$s complexity rules, but %3$s are required.
INSUFFICIENT_COMPLEXITY_RULES=No rules have been configured for a \u5BC6\u7801 of length %1$s.
SOURCE_VIOLATION=\u5BC6\u7801 cannot be the same as your %1$s \u5BC6\u7801.
TOO_LONG=\u5BC6\u7801 must be no more than %2$s characters in length.
TOO_SHORT=\u5BC6\u7801 must be %1$s or more characters in length.
TOO_MANY_OCCURRENCES=\u5BC6\u7801 contains %2$s occurrences of the character '%1$s', but at most %3$s are allowed.

jakarta.validation.constraints.AssertFalse.message     = must be false
jakarta.validation.constraints.AssertTrue.message      = must be true
jakarta.validation.constraints.DecimalMax.message      = must be less than ${inclusive == true ? 'or equal to ' : ''}{value}
jakarta.validation.constraints.DecimalMin.message      = must be greater than ${inclusive == true ? 'or equal to ' : ''}{value}
jakarta.validation.constraints.Digits.message          = numeric value out of bounds (<{integer} digits>.<{fraction} digits> expected)
jakarta.validation.constraints.Email.message           = must be a well-formed email address
jakarta.validation.constraints.Future.message          = must be a future date
jakarta.validation.constraints.FutureOrPresent.message = must be a date in the present or in the future
jakarta.validation.constraints.Max.message             = must be less than or equal to {value}
jakarta.validation.constraints.Min.message             = must be greater than or equal to {value}
jakarta.validation.constraints.Negative.message        = must be less than 0
jakarta.validation.constraints.NegativeOrZero.message  = must be less than or equal to 0
jakarta.validation.constraints.NotBlank.message        = must not be blank
jakarta.validation.constraints.NotEmpty.message        = must not be empty
jakarta.validation.constraints.NotNull.message         = must not be null
jakarta.validation.constraints.Null.message            = must be null
jakarta.validation.constraints.Past.message            = must be a past date
jakarta.validation.constraints.PastOrPresent.message   = must be a date in the past or in the present
jakarta.validation.constraints.Pattern.message         = must match "{regexp}"
jakarta.validation.constraints.Positive.message        = must be greater than 0
jakarta.validation.constraints.PositiveOrZero.message  = must be greater than or equal to 0
jakarta.validation.constraints.Size.message            = size must be between {min} and {max}

org.hibernate.validator.constraints.CreditCardNumber.message        = invalid credit card number
org.hibernate.validator.constraints.Currency.message                = invalid currency (must be one of {value})
org.hibernate.validator.constraints.EAN.message                     = invalid {type} barcode
org.hibernate.validator.constraints.Email.message                   = not a well-formed email address
org.hibernate.validator.constraints.ISBN.message                    = invalid ISBN
org.hibernate.validator.constraints.Length.message                  = length must be between {min} and {max}
org.hibernate.validator.constraints.CodePointLength.message         = length must be between {min} and {max}
org.hibernate.validator.constraints.LuhnCheck.message               = the check digit for ${validatedValue} is invalid, Luhn Modulo 10 checksum failed
org.hibernate.validator.constraints.Mod10Check.message              = the check digit for ${validatedValue} is invalid, Modulo 10 checksum failed
org.hibernate.validator.constraints.Mod11Check.message              = the check digit for ${validatedValue} is invalid, Modulo 11 checksum failed
org.hibernate.validator.constraints.ModCheck.message                = the check digit for ${validatedValue} is invalid, {modType} checksum failed
org.hibernate.validator.constraints.Normalized.message              = must be normalized
org.hibernate.validator.constraints.NotBlank.message                = may not be empty
org.hibernate.validator.constraints.NotEmpty.message                = may not be empty
org.hibernate.validator.constraints.ParametersScriptAssert.message  = script expression "{script}" didn't evaluate to true
org.hibernate.validator.constraints.Range.message                   = must be between {min} and {max}
org.hibernate.validator.constraints.ScriptAssert.message            = script expression "{script}" didn't evaluate to true
org.hibernate.validator.constraints.UniqueElements.message          = must only contain unique elements
org.hibernate.validator.constraints.URL.message                     = must be a valid URL
org.hibernate.validator.constraints.UUID.message                     = must be a valid UUID

org.hibernate.validator.constraints.br.CNPJ.message                 = invalid Brazilian corporate taxpayer registry number (CNPJ)
org.hibernate.validator.constraints.br.CPF.message                  = invalid Brazilian individual taxpayer registry number (CPF)
org.hibernate.validator.constraints.br.TituloEleitoral.message      = invalid Brazilian Voter ID card number

org.hibernate.validator.constraints.pl.REGON.message                = invalid Polish Taxpayer Identification Number (REGON)
org.hibernate.validator.constraints.pl.NIP.message                  = invalid VAT Identification Number (NIP)
org.hibernate.validator.constraints.pl.PESEL.message                = invalid Polish National Identification Number (PESEL)

org.hibernate.validator.constraints.ru.INN.message                  = invalid Russian taxpayer identification number (INN)

org.hibernate.validator.constraints.time.DurationMax.message        = must be shorter than${inclusive == true ? ' or equal to' : ''}${days == 0 ? '' : days == 1 ? ' 1 day' : ' ' += days += ' days'}${hours == 0 ? '' : hours == 1 ? ' 1 hour' : ' ' += hours += ' hours'}${minutes == 0 ? '' : minutes == 1 ? ' 1 minute' : ' ' += minutes += ' minutes'}${seconds == 0 ? '' : seconds == 1 ? ' 1 second' : ' ' += seconds += ' seconds'}${millis == 0 ? '' : millis == 1 ? ' 1 milli' : ' ' += millis += ' millis'}${nanos == 0 ? '' : nanos == 1 ? ' 1 nano' : ' ' += nanos += ' nanos'}
org.hibernate.validator.constraints.time.DurationMin.message        = must be longer than${inclusive == true ? ' or equal to' : ''}${days == 0 ? '' : days == 1 ? ' 1 day' : ' ' += days += ' days'}${hours == 0 ? '' : hours == 1 ? ' 1 hour' : ' ' += hours += ' hours'}${minutes == 0 ? '' : minutes == 1 ? ' 1 minute' : ' ' += minutes += ' minutes'}${seconds == 0 ? '' : seconds == 1 ? ' 1 second' : ' ' += seconds += ' seconds'}${millis == 0 ? '' : millis == 1 ? ' 1 milli' : ' ' += millis += ' millis'}${nanos == 0 ? '' : nanos == 1 ? ' 1 nano' : ' ' += nanos += ' nanos'}